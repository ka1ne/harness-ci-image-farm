pipeline:
  name: Harness CI Image Factory - Reset Images to Harness
  identifier: harness_ci_image_factory_reset
  projectIdentifier: ${PROJECT_ID}
  orgIdentifier: ${ORG_ID}
  description: This pipeline will reset the custom images back to the default Harness Platform values
  tags:
    role: harness-ci-image-factory
    source: harness
  variables:
    - name: HARNESS_URL
      type: String
      description: Harness platform URL
      required: true
      value: ${HARNESS_URL}
    - name: HARNESS_API_KEY_SECRET
      type: String
      description: Secret identifier for Harness API key
      required: true
      value: ${HARNESS_API_KEY_SECRET}
    - name: infrastructure_type
      type: String
      description: Type of infrastructure (K8 or VM)
      value: <+input>.allowedValues(K8,VM)
      default: "K8"
    - name: include_windows_rootless
      type: String
      description: Include Windows rootless images
      value: <+input>.allowedValues(true,false)
      default: "false"

  stages:
    - stage:
        name: Gather Harness Images
        identifier: gather_harness_images
        description: Reads official Harness API to gather a list of the Harness Images used for pipeline execution
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Get Default Configuration
                  identifier: get_default_configuration
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/get-default-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>
                    method: GET
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue(pipeline.variables.HARNESS_API_KEY_SECRET)> # Ensure pipeline scope for secret
                      - key: Content-Type
                        value: application/json
                    outputVariables:
                      - name: default_config
                        value: <+httpResponseBody>
              - step:
                  type: ShellScript
                  name: Get List of Images to Update
                  identifier: get_list_of_images_to_update
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          echo "Getting list of images to reset..."
                          DEFAULT_CONFIG='<+execution.steps.get_default_configuration.output.outputVariables.default_config>'
                          
                          # Extract the data object
                          DATA=$(echo "$DEFAULT_CONFIG" | grep -o '"data":{[^}]*}' | sed 's/"data"://')
                          
                          # Process each field in the data object
                          IMAGES=""
                          
                          # Standard images
                          for FIELD in addonTag liteEngineTag gitCloneTag buildAndPushDockerRegistryTag buildAndPushECRTag buildAndPushGCRTag gcsUploadTag s3UploadTag artifactoryUploadTag cacheGCSTag cacheS3Tag securityTag; do
                            IMAGE=$(echo "$DATA" | grep -o "\"$FIELD\":\"[^\"]*\"" | cut -d':' -f2- | tr -d '\"')
                            if [ ! -z "$IMAGE" ]; then
                              if [ ! -z "$IMAGES" ]; then
                                IMAGES="$IMAGES,$FIELD=$IMAGE"
                              else
                                IMAGES="$FIELD=$IMAGE"
                              fi
                            fi
                          done
                          
                          # Check if we should include Windows rootless images
                          if [ "<+pipeline.variables.include_windows_rootless>" == "true" ]; then
                            # Add Windows rootless fields
                            ROOTLESS_FIELDS="windowsRootlessAddonTag,windowsRootlessLiteEngineTag,windowsRootlessGitCloneTag"
                            
                            for FIELD in $(echo $ROOTLESS_FIELDS | tr ',' '\n'); do
                              IMAGE=$(echo "$DATA" | grep -o "\"$FIELD\":\"[^\"]*\"" | cut -d':' -f2- | tr -d '\"')
                              if [ ! -z "$IMAGE" ]; then
                                if [ ! -z "$IMAGES" ]; then
                                  IMAGES="$IMAGES,$FIELD=$IMAGE"
                                else
                                  IMAGES="$FIELD=$IMAGE"
                                fi
                              else
                                # Add defaults for missing fields
                                case "$FIELD" in
                                  windowsRootlessAddonTag)
                                    DEFAULT_IMAGE="harness/ci-addon:rootless-1.16.71"
                                    ;;
                                  windowsRootlessLiteEngineTag)
                                    DEFAULT_IMAGE="harness/ci-lite-engine:rootless-1.16.71"
                                    ;;
                                  windowsRootlessGitCloneTag)
                                    DEFAULT_IMAGE="harness/drone-git:1.6.7-rootless"
                                    ;;
                                  *)
                                    DEFAULT_IMAGE=""
                                    ;;
                                esac
                                
                                if [ ! -z "$DEFAULT_IMAGE" ]; then
                                  if [ ! -z "$IMAGES" ]; then
                                    IMAGES="$IMAGES,$FIELD=$DEFAULT_IMAGE"
                                  else
                                    IMAGES="$FIELD=$DEFAULT_IMAGE"
                                  fi
                                fi
                              fi
                            done
                          fi
                          
                          echo "Images to reset: $IMAGES"
                          harness_io out images="$IMAGES"
                    environmentVariables: []
                  timeout: 10m
    
    - stage:
        name: CLEANUP
        identifier: CLEANUP
        description: Reset all custom Harness CI image configurations back to defaults
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Reset Custom Configuration of Images
                  identifier: Reset_Custom_Configuration_of_Images
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/reset-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>
                    method: POST
                    assertion: <+httpResponseCode> == 200
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue(pipeline.variables.HARNESS_API_KEY_SECRET)> # Ensure pipeline scope for secret
                      - key: Content-Type
                        value: application/json
                    outputVariables: []
                    requestBody: "[{\"field\": \"<+stage.variables.field_name>\"}]"
                  timeout: 30s
        tags: {}
        when:
          pipelineStatus: Success
        strategy:
          repeat:
            items: <+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images.split(",")>
            maxConcurrency: 5
        variables:
          - name: field_name
            type: String
            description: Field name to reset to default
            value: <+repeat.item.split("=")[0]>
    
    - stage:
        name: Verify Reset
        identifier: verify_reset
        description: Verifies that all Harness images have been reset to default
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Verify Custom Config Reset
                  identifier: verify_custom_config_reset
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/get-customer-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>&overridesOnly=true
                    method: GET
                    assertion: <+httpResponseCode> == 200
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue(pipeline.variables.HARNESS_API_KEY_SECRET)> # Ensure pipeline scope for secret
                      - key: Content-Type
                        value: application/json
                    outputVariables:
                      - name: overrides
                        value: <+httpResponseBody>
              - step:
                  type: ShellScript
                  name: Check Reset Status
                  identifier: check_reset_status
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          echo "Checking reset status..."
                          
                          # Parse response
                          OVERRIDES='<+execution.steps.verify_custom_config_reset.output.outputVariables.overrides>'
                          
                          if [[ $OVERRIDES == *"data"*":{}"* ]] || [[ $OVERRIDES == *"\"data\":{}"* ]]; then
                            echo "✅ All images have been successfully reset to default"
                          else
                            echo "⚠️ Some image configurations still have overrides:"
                            echo "$OVERRIDES"
                            exit 1
                          fi
                    environmentVariables: []
                  timeout: 10m
        tags: {}
        when:
          pipelineStatus: Success
  
  timeout: 30m 