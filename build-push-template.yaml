template:
  name: Build and Push Harness Images
  identifier: build_push_harness_images
  versionLabel: v1.0
  type: Stage
  projectIdentifier: ${PROJECT_ID}
  orgIdentifier: ${ORG_ID}
  tags: {}
  spec:
    execution:
      steps:
        - step:
            type: Background
            name: start_buildkit_daemon
            identifier: start_buildkit_daemon
            spec:
              connectorRef: ${DOCKER_CONNECTOR_ID}
              image: moby/buildkit:v0.11.6
              privileged: true
              shell: Sh
              command: |-
                buildkitd --addr tcp://0.0.0.0:1234
              envVariables:
                - name: BUILDKIT_HOST
                  value: tcp://0.0.0.0:1234
            timeout: 10m
        - step:
            type: ShellScript
            name: prepare_build
            identifier: prepare_build
            spec:
              shell: Bash
              source:
                type: Inline
                spec:
                  script: |
                    #!/bin/bash
                    set -eo pipefail
                    
                    IMAGE_NAME="<+stage.variables.IMAGE_NAME>"
                    IMAGE_VERSION="<+stage.variables.IMAGE_VERSION>"
                    IMAGE="<+stage.variables.IMAGE>"
                    
                    echo "Preparing build for $IMAGE_NAME:$IMAGE_VERSION"
                    
                    # Create temporary build directory
                    mkdir -p build
                    cd build
                    
                    # Create Dockerfile for the image
                    cat > Dockerfile << EOF
                    FROM $IMAGE
                    
                    # Labels for image management
                    LABEL org.opencontainers.image.source="https://github.com/harness/ci-images"
                    LABEL org.opencontainers.image.vendor="Harness Inc."
                    LABEL org.opencontainers.image.created="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
                    LABEL org.opencontainers.image.version="$IMAGE_VERSION"
                    LABEL org.opencontainers.image.title="$IMAGE_NAME"
                    LABEL harness.io/factory-build-id="<+pipeline.id>"
                    
                    # Override entrypoint with a valid shell to ensure health checks work
                    ENTRYPOINT ["/bin/sh", "-c"]
                    CMD ["echo 'Harness CI image ready'"]
                    EOF
                    
                    # Print Dockerfile for debugging
                    echo "=== Dockerfile ==="
                    cat Dockerfile
                    echo "================="
                    
                    # Save image info for next steps
                    echo "$IMAGE_NAME" > ../image_name.txt
                    echo "$IMAGE_VERSION" > ../image_version.txt
                    echo "$IMAGE" > ../image.txt
              environmentVariables: []
            timeout: 10m
        - step:
            type: Run
            name: build_and_push_image
            identifier: build_and_push_image
            spec:
              connectorRef: ${DOCKER_CONNECTOR_ID}
              image: moby/buildkit:v0.11.6-rootless
              shell: Sh
              envVariables:
                - name: BUILDKIT_HOST
                  value: tcp://localhost:1234
                - name: REGISTRY_USER
                  value: <+secrets.getValue("REGISTRY_USER")>
                - name: REGISTRY_PASS
                  value: <+secrets.getValue("REGISTRY_PASSWORD")>
              command: |
                #!/bin/sh
                set -e
                
                cd build
                
                # Read image info from previous step
                IMAGE_NAME=$(cat ../image_name.txt)
                IMAGE_VERSION=$(cat ../image_version.txt)
                SOURCE_IMAGE=$(cat ../image.txt)
                
                # Login to registry
                echo $REGISTRY_PASS | buildctl login <+pipeline.variables.registry> --username $REGISTRY_USER --password-stdin
                
                # Build the image
                echo "Building image: $IMAGE_NAME:$IMAGE_VERSION"
                buildctl build \
                  --frontend=dockerfile.v0 \
                  --local context=. \
                  --local dockerfile=. \
                  --output type=image,name=<+pipeline.variables.registry>/$IMAGE_NAME:$IMAGE_VERSION,push=true
                
                # Also tag and push as latest
                echo "Also pushing as latest tag"
                buildctl build \
                  --frontend=dockerfile.v0 \
                  --local context=. \
                  --local dockerfile=. \
                  --output type=image,name=<+pipeline.variables.registry>/$IMAGE_NAME:latest,push=true
                
                echo "Image built and pushed: <+pipeline.variables.registry>/$IMAGE_NAME:$IMAGE_VERSION"
                echo "Also pushed as: <+pipeline.variables.registry>/$IMAGE_NAME:latest"
                
                # Create metadata file
                cat > ../image_metadata.json << EOF
                {
                  "image": {
                    "name": "$IMAGE_NAME",
                    "version": "$IMAGE_VERSION",
                    "source": "$SOURCE_IMAGE",
                    "target": "<+pipeline.variables.registry>/$IMAGE_NAME:$IMAGE_VERSION",
                    "pipeline_id": "<+pipeline.id>",
                    "build_time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
                  }
                }
                EOF
            timeout: 30m
        - step:
            type: ShellScript
            name: verify_image
            identifier: verify_image
            spec:
              shell: Bash
              source:
                type: Inline
                spec:
                  script: |
                    #!/bin/bash
                    set -eo pipefail
                    
                    IMAGE_NAME=$(cat build/../image_name.txt)
                    IMAGE_VERSION=$(cat build/../image_version.txt)
                    
                    echo "Verifying image was pushed: <+pipeline.variables.registry>/$IMAGE_NAME:$IMAGE_VERSION"
                    
                    # Use Docker to verify the image exists
                    if docker pull <+pipeline.variables.registry>/$IMAGE_NAME:$IMAGE_VERSION; then
                      echo "Image verification succeeded"
                      
                      # Output success variable
                      echo "##harness:setOutput name=image_pushed \"true\""
                      echo "##harness:setOutput name=full_image_name \"<+pipeline.variables.registry>/$IMAGE_NAME:$IMAGE_VERSION\""
                    else
                      echo "Image verification failed"
                      exit 1
                    fi
                    
                    # Display metadata
                    echo "Image metadata:"
                    cat build/../image_metadata.json
              environmentVariables:
                - name: DOCKER_USERNAME
                  value: <+secrets.getValue("REGISTRY_USER")>
                - name: DOCKER_PASSWORD
                  value: <+secrets.getValue("REGISTRY_PASSWORD")>
            timeout: 10m 