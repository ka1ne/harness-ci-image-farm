{{- if .Values.terraform.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-terraform
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-terraform
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: "terraform"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
spec:
  backoffLimit: 10
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-terraform
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ .Release.Name }}-terraform
      containers:
        - name: terraform
          image: hashicorp/terraform:1.5.7
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-c"
            - |
              set -e
              
              # Create terraform vars in /tmp
              cat <<EOF > /tmp/terraform.tfvars
              harness_platform_url = "$HARNESS_PLATFORM_URL"
              harness_platform_account = "$HARNESS_ACCOUNT_ID"
              harness_platform_key = "$HARNESS_API_KEY"
              harness_api_key_secret = "$HARNESS_API_KEY_SECRET"
              organization_name = "$ORGANIZATION_NAME"
              create_organization = $CREATE_ORGANIZATION
              project_name = "$PROJECT_NAME"
              create_project = $CREATE_PROJECT
              container_registry = "$CONTAINER_REGISTRY"
              container_registry_type = "$CONTAINER_REGISTRY_TYPE"
              container_registry_connector_ref = "$CONTAINER_REGISTRY_CONNECTOR_REF"
              kubernetes_connector_ref = "$KUBERNETES_CONNECTOR_REF"
              kubernetes_namespace = "$KUBERNETES_NAMESPACE"
              max_build_concurrency = "$MAX_BUILD_CONCURRENCY"
              enable_schedule = $ENABLE_SCHEDULE
              schedule = "$SCHEDULE"
              modify_default_image_config = $MODIFY_DEFAULT_IMAGE_CONFIG
              EOF
              
              # Initialize terraform (runs in /workspace where main.tf is)
              terraform init
              
              # Run terraform action, explicitly using the var-file from /tmp
              terraform {{ .Values.terraform.job.action }} -var-file=/tmp/terraform.tfvars -auto-approve
          resources:
            {{- toYaml .Values.terraform.job.resources | nindent 12 }}
          env:
            - name: TF_LOG
              value: DEBUG
            - name: HARNESS_PLATFORM_URL
              value: {{ .Values.global.harness.platformUrl | quote }}
            - name: HARNESS_ACCOUNT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-harness-credentials
                  key: accountId
            - name: HARNESS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-harness-credentials
                  key: apiKey
            - name: HARNESS_API_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-harness-credentials
                  key: apiKeySecret
            - name: ORGANIZATION_NAME
              value: {{ .Values.global.organization.name | quote }}
            - name: CREATE_ORGANIZATION
              value: {{ .Values.global.organization.create | quote }}
            - name: PROJECT_NAME
              value: {{ .Values.global.project.name | quote }}
            - name: CREATE_PROJECT
              value: {{ .Values.global.project.create | quote }}
            - name: CONTAINER_REGISTRY
              value: {{ .Values.global.containerRegistry.name | quote }}
            - name: CONTAINER_REGISTRY_TYPE
              value: {{ .Values.global.containerRegistry.type | quote }}
            - name: CONTAINER_REGISTRY_CONNECTOR_REF
              value: {{ .Values.global.containerRegistry.connectorRef | quote }}
            - name: KUBERNETES_CONNECTOR_REF
              value: {{ .Values.global.kubernetes.connectorRef | quote }}
            - name: KUBERNETES_NAMESPACE
              value: {{ .Values.global.kubernetes.namespace | quote }}
            - name: MAX_BUILD_CONCURRENCY
              value: {{ .Values.terraform.variables.maxBuildConcurrency | quote }}
            - name: ENABLE_SCHEDULE
              value: {{ .Values.terraform.variables.enableSchedule | quote }}
            - name: SCHEDULE
              value: {{ .Values.terraform.variables.schedule | quote }}
            - name: MODIFY_DEFAULT_IMAGE_CONFIG
              value: {{ .Values.terraform.variables.modifyDefaultImageConfig | quote }}
          volumeMounts:
            - name: terraform-workspace-files
              mountPath: /workspace
          workingDir: /workspace
      volumes:
        - name: terraform-workspace-files
          projected:
            sources:
            - configMap:
                name: {{ .Release.Name }}-terraform-code
            - configMap:
                name: {{ .Release.Name }}-terraform-templates
---
# Create Service Account for Terraform Job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-terraform
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-terraform
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# Create Secret for Harness Credentials
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-harness-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-credentials
    app.kubernetes.io/instance: {{ .Release.Name }}
type: Opaque
data:
  {{- if hasKey .Values.global.harness "secrets" }}
    {{- if hasKey .Values.global.harness.secrets "accountId" }}
  accountId: {{ .Values.global.harness.secrets.accountId | b64enc }}
    {{- else }}
  accountId: {{ "" | b64enc }}
    {{- end }}
    {{- if hasKey .Values.global.harness.secrets "apiKey" }}
  apiKey: {{ .Values.global.harness.secrets.apiKey | b64enc }}
    {{- else }}
  apiKey: {{ "" | b64enc }}
    {{- end }}
    {{- if hasKey .Values.global.harness.secrets "apiKeySecret" }}
  apiKeySecret: {{ .Values.global.harness.secrets.apiKeySecret | b64enc }}
    {{- else }}
  apiKeySecret: {{ "" | b64enc }}
    {{- end }}
  {{- else }}
  accountId: {{ "" | b64enc }}
  apiKey: {{ "" | b64enc }}
  apiKeySecret: {{ "" | b64enc }}
  {{- end }}
{{- end }} 