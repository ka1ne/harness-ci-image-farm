{{- if .Values.rssMonitor.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-rss-monitor
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-rss-monitor
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: "rss-monitor"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: {{ .Values.rssMonitor.deployment.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-rss-monitor
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-rss-monitor
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ if .Values.rssMonitor.serviceAccount.create }}{{ .Release.Name }}-rss-monitor{{ else }}{{ .Values.rssMonitor.serviceAccount.name }}{{ end }}
      containers:
        - name: rss-monitor
          image: golang:1.19-alpine
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-c"
            - |
              # Build and run the RSS monitor from the mounted source code
              cd /app
              
              # Create app directory
              mkdir -p /app/src
              cat > /app/src/main.go << 'EOF'
              {{- .Files.Get "../../tools/rss-monitor/main.go" | nindent 14 }}
              EOF
              
              # Build the application
              echo "Building RSS monitor application..."
              cd /app/src
              go mod init harness.io/rss-monitor
              go mod tidy
              go build -o /app/rss-monitor
              
              # Run the application
              echo "Starting RSS monitor application..."
              /app/rss-monitor \
                --webhook-url="${HARNESS_WEBHOOK_URL}" \
                --api-key="${HARNESS_API_KEY}" \
                --interval="${CHECK_INTERVAL}" \
                --debug=${DEBUG_MODE}
          env:
            - name: HARNESS_WEBHOOK_URL
              value: "{{ .Values.global.harness.platformUrl }}/gateway/api/webhooks/{{ .Values.global.harness.secrets.accountId }}/trigger"
            - name: HARNESS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-harness-credentials
                  key: apiKey
            - name: CHECK_INTERVAL
              value: "{{ .Values.rssMonitor.config.checkInterval }}"
            - name: DEBUG_MODE
              value: "{{ .Values.rssMonitor.config.debug }}"
            - name: TARGET_IMAGES
              value: {{ join "," .Values.rssMonitor.config.targetImages | quote }}
          resources:
            {{- toYaml .Values.rssMonitor.deployment.resources | nindent 12 }}
          volumeMounts:
            - name: rss-monitor-state
              mountPath: /app/data
      volumes:
        - name: rss-monitor-state
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-rss-monitor-state
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-rss-monitor-state
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-rss-monitor-state
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
{{- if .Values.rssMonitor.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-rss-monitor
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-rss-monitor
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}
{{- end }} 