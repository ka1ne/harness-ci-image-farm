{{- if .Values.terraform.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-terraform-code
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-terraform-code
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  # Main Terraform configuration
  "main.tf": |
    provider "harness" {
      endpoint         = var.harness_platform_url
      account_id       = var.harness_platform_account
      platform_api_key = var.harness_platform_key
    }

    locals {
      # Common organization and project IDs for easier reference
      org_id     = var.harness_organization_id
      project_id = var.harness_project_id
      
      # Registry type mapping for templates
      build_push_target = {
        "azure"      = "harness-ci-build-images-azure.yaml"
        "docker"     = "harness-ci-build-images-docker.yaml"
        "ecr"        = "ecr-build-push.yaml"
        "docker-hub" = "docker-hub-build-push.yaml"
        "gcp"        = "gcr-build-push.yaml"
      }
    }

    # CI Image Factory Templates and Pipelines
    resource "harness_platform_template" "gather_harness_ci_images" {
      identifier    = "gather_harness_ci_images"
      name          = "Gather Harness CI Images"
      org_id        = local.org_id
      project_id    = local.project_id
      version       = "v1.1.0"
      is_stable     = true
      comments      = "Template for gathering Harness CI images"
      
      template_yaml = templatefile(
        "${path.module}/templates.templates.gather-harness-ci-image-list.yaml",
        {
          HARNESS_URL : var.harness_platform_url
          HARNESS_API_KEY_SECRET : var.harness_api_key_secret
        }
      )
    }

    resource "harness_platform_template" "build_push_templates" {
      identifier    = "build_and_push_harness_ci_standard_images"
      name          = "Build and Push Harness CI Standard Images"
      org_id        = local.org_id
      project_id    = local.project_id
      version       = "v1.1.0"
      is_stable     = true
      comments      = "Template for building Harness CI images"
      
      template_yaml = templatefile(
        "${path.module}/templates.templates.${lookup(local.build_push_target, var.container_registry_type, "MISSING-REGISTRY-TEMPLATE")}",
        {
          REGISTRY_NAME : var.container_registry
          MAX_CONCURRENCY : var.max_build_concurrency
          CONTAINER_REGISTRY_CONNECTOR : var.container_registry_connector_ref
          KUBERNETES_CONNECTOR_REF : var.kubernetes_connector_ref
          KUBERNETES_NAMESPACE : var.kubernetes_namespace
        }
      )
    }

    resource "harness_platform_pipeline" "harness_ci_image_factory" {
      identifier  = "harness_ci_image_factory"
      name        = "Harness CI Image Factory"
      description = "This pipeline will find, build, push, and configure Harness Platform to retrieve CI build images from a custom registry"
      org_id      = local.org_id
      project_id  = local.project_id
      
      yaml = templatefile(
        "${path.module}/templates.pipelines.harness-ci-image-factory.yaml",
        {
          HARNESS_URL : var.harness_platform_url
          HARNESS_API_KEY_SECRET : var.harness_api_key_secret
          GATHER_SCAN_TEMPLATE : harness_platform_template.gather_harness_ci_images.identifier
          BUILD_PUSH_TEMPLATE : harness_platform_template.build_push_templates.identifier
          REGISTRY_NAME : var.container_registry
          MAX_CONCURRENCY : var.max_build_concurrency
          CONTAINER_REGISTRY_CONNECTOR : var.container_registry_connector_ref
          KUBERNETES_CONNECTOR_REF : var.kubernetes_connector_ref
          KUBERNETES_NAMESPACE : var.kubernetes_namespace
          MODIFY_DEFAULT : tostring(var.modify_default_image_config)
        }
      )
    }

    resource "harness_platform_pipeline" "harness_ci_image_factory_cleanup" {
      identifier  = "harness_ci_image_factory_reset"
      name        = "Harness CI Image Factory - Reset Images to Harness"
      description = "This pipeline will reset the custom images back to the default Harness Platform values"
      org_id      = local.org_id
      project_id  = local.project_id
      
      yaml = templatefile(
        "${path.module}/templates.pipelines.harness-ci-image-reset.yaml",
        {
          HARNESS_URL : var.harness_platform_url
          HARNESS_API_KEY_SECRET : var.harness_api_key_secret
          GATHER_SCAN_TEMPLATE : harness_platform_template.gather_harness_ci_images.identifier
        }
      )
    }

    resource "harness_platform_triggers" "pipeline_execution_schedule" {
      identifier  = "retrieve_and_build_images"
      name        = "Retrieve and Build Images"
      description = "Scheduled execution of the CI Image Factory pipeline"
      org_id      = local.org_id
      project_id  = local.project_id
      target_id   = harness_platform_pipeline.harness_ci_image_factory.id
      
      yaml = templatefile(
        "${path.module}/templates.triggers.retrieve-and-build-images.yaml",
        {
          SCHEDULE : var.schedule
          REGISTRY_NAME : var.container_registry
        }
      )
    }

    resource "harness_platform_triggers" "ecr_polling_trigger" {
      identifier  = "poll_ecr_registry_for_new_harness_images"
      name        = "Poll ECR Registry for New Harness Images"
      description = "Automatically poll ECR for new Harness images"
      org_id      = local.org_id
      project_id  = local.project_id
      target_id   = harness_platform_pipeline.harness_ci_image_factory.id
      
      yaml = templatefile(
        "${path.module}/templates.triggers.harness-ecr-polling-trigger.yaml",
        {
          SCHEDULE : "0 */6 * * *",  # Poll every 6 hours by default
          PIPELINE_ID : harness_platform_pipeline.harness_ci_image_factory.id,
          REGISTRY_NAME : var.container_registry,
          MODIFY_DEFAULT : tostring(var.modify_default_image_config)
        }
      )
    }

    resource "harness_platform_triggers" "rss_webhook_trigger" {
      identifier  = "harness_ci_rss_feed_monitor"
      name        = "Harness CI RSS Feed Monitor"
      description = "Monitor Harness CI updates via RSS feed"
      org_id      = local.org_id
      project_id  = local.project_id
      target_id   = harness_platform_pipeline.harness_ci_image_factory.id
      
      yaml = templatefile(
        "${path.module}/templates.triggers.harness-image-update-trigger.yaml",
        {
          PIPELINE_ID : harness_platform_pipeline.harness_ci_image_factory.id,
          REGISTRY_NAME : var.container_registry,
          MODIFY_DEFAULT : tostring(var.modify_default_image_config)
        }
      )
    }

  # variables.tf
  "variables.tf": |
    # Provider Setup Details
    variable "harness_platform_url" {
      type        = string
      description = "[Optional] Enter the Harness Platform URL.  Defaults to Harness SaaS URL"
      default     = "https://app.harness.io/gateway"
    }

    variable "harness_platform_account" {
      type        = string
      description = "[Required] Enter the Harness Platform Account Number"
      sensitive   = true
    }

    variable "harness_platform_key" {
      type        = string
      description = "[Required] Enter the Harness Platform API Key for your account"
      sensitive   = true
    }

    variable "harness_api_key_secret" {
      type        = string
      description = "[Required] Enter the Harness secret that holds an API key for your account"
    }

    variable "harness_organization_id" {
      type        = string
      description = "[Required] Provide the Harness Organization ID."
    }

    variable "harness_project_id" {
      type        = string
      description = "[Required] Provide the Harness Project ID."
    }

    variable "container_registry" {
      type        = string
      description = "Container Registry to which the image will be saved and stored"
    }

    variable "container_registry_type" {
      type        = string
      description = "Type of Container Registry to which images will be pushed. Supported Values - azure or docker"

      validation {
        condition = (
          contains(["azure", "docker"], lower(var.container_registry_type))
        )
        error_message = <<EOF
            Validation of an object failed.
                * [Required] Container Registry Type must be one of following:
                  - azure
                  - docker
            EOF
      }
    }

    variable "container_registry_connector_ref" {
      type        = string
      description = "Container Registry Connector Reference"
    }

    variable "kubernetes_connector_ref" {
      type        = string
      description = "Kubernetes Connector Reference"
    }

    variable "kubernetes_namespace" {
      type        = string
      description = "Kubernetes Namespace within Cluster in which the CI process will build"
    }

    variable "max_build_concurrency" {
      type        = string
      description = "Maximum number of simultaneous builds to perform"
      default     = 5
    }

    variable "enable_schedule" {
      type        = bool
      description = "[Optional] Should we enable the execution of this pipeline to run on a schedule?"
      default     = true
    }

    variable "schedule" {
      type        = string
      description = "[Optional] Cron Format schedule for when and how frequently to schedule this pipeline"
      default     = "0 2 * * *"
    }

    variable "modify_default_image_config" {
      type        = bool
      description = "[Optional] Update the Harness Platform to use the newly pushed images as the default versions when running CI pipelines. (requires modification of the harnessImages docker connector)"
      default     = true
    }

  # outputs.tf
  "outputs.tf": |
    output "pipeline" {
      value = harness_platform_pipeline.harness_ci_image_factory.id
    }

    output "cleanup_pipeline" {
      value = harness_platform_pipeline.harness_ci_image_factory_cleanup.id
    }

  # versions.tf
  "versions.tf": |
    terraform {
      required_providers {
        harness = {
          source  = "harness/harness"
          version = ">= 0.14"
        }
        time = {
          source  = "hashicorp/time"
          version = "~> 0.9.1"
        }
      }
    }

  # Templates directory structure will be populated by init container
{{- end }} 