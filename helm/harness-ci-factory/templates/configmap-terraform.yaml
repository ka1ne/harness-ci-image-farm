{{- if .Values.terraform.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-terraform-code
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-terraform-code
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  # Main Terraform configuration
  "main.tf": |
    provider "harness" {
      endpoint         = var.harness_platform_url
      account_id       = var.harness_platform_account
      platform_api_key = var.harness_platform_key
    }

    # Organization and Project Setup
    module "organization" {
      source  = "harness-community/structure/harness//modules/organizations"
      version = "0.1.2"

      name     = var.organization_name
      existing = var.create_organization ? false : true
    }

    module "project" {
      source  = "harness-community/structure/harness//modules/projects"
      version = "0.1.2"

      name            = var.project_name
      organization_id = module.organization.details.id
      existing        = var.create_project ? false : true
    }

    # CI Image Factory Templates and Pipelines
    module "gather-harness-ci-images-template" {
      source  = "harness-community/content/harness//modules/templates"
      version = "0.1.1"

      name             = "Gather Harness CI Images"
      organization_id  = module.organization.details.id
      project_id       = module.project.details.id
      template_version = "v1.0.0"
      type             = "Stage"
      yaml_data = templatefile(
        "${path.module}/templates.templates.gather-harness-ci-image-list.yaml",
        {
          HARNESS_URL : var.harness_platform_url
          HARNESS_API_KEY_SECRET : var.harness_api_key_secret
        }
      )
      tags = {
        role = "harness-ci-image-factory"
      }
    }

    module "build-push-template" {
      source  = "harness-community/content/harness//modules/templates"
      version = "0.1.1"

      name             = "Build and Push Harness CI Standard Images"
      organization_id  = module.organization.details.id
      project_id       = module.project.details.id
      template_version = "v1.0.0"
      type             = "Stage"
      yaml_data = templatefile(
        "${path.module}/templates.templates.${lookup(local.build_push_target, var.container_registry_type, "MISSING-REGISTRY-TEMPLATE")}",
        {
          REGISTRY_NAME : var.container_registry
          MAX_CONCURRENCY : var.max_build_concurrency
          CONTAINER_REGISTRY_CONNECTOR : var.container_registry_connector_ref
          KUBERNETES_CONNECTOR_REF : var.kubernetes_connector_ref
          KUBERNETES_NAMESPACE : var.kubernetes_namespace
        }
      )
      tags = {
        role = "harness-ci-image-factory"
      }
    }

    module "harness-ci-image-factory" {
      source  = "harness-community/content/harness//modules/pipelines"
      version = "0.1.1"

      name            = "Harness CI Image Factory"
      description     = "This pipeline will find, build, push, and configure Harness Platform to retrieve CI build images from a custom registry"
      organization_id = module.organization.details.id
      project_id      = module.project.details.id
      yaml_data = templatefile(
        "${path.module}/templates.pipelines.harness-ci-image-factory.yaml",
        {
          HARNESS_URL : var.harness_platform_url
          HARNESS_API_KEY_SECRET : var.harness_api_key_secret
          GATHER_SCAN_TEMPLATE : module.gather-harness-ci-images-template.details.id
          BUILD_PUSH_TEMPLATE : module.build-push-template.details.id
          REGISTRY_NAME : var.container_registry
          MAX_CONCURRENCY : var.max_build_concurrency
          CONTAINER_REGISTRY_CONNECTOR : var.container_registry_connector_ref
          KUBERNETES_CONNECTOR_REF : var.kubernetes_connector_ref
          KUBERNETES_NAMESPACE : var.kubernetes_namespace
          MODIFY_DEFAULT : tostring(var.modify_default_image_config)
        }
      )
      tags = {
        role = "harness-ci-image-factory"
      }
    }

    module "harness-ci-image-factory-cleanup" {
      source  = "harness-community/content/harness//modules/pipelines"
      version = "0.1.1"

      name            = "Harness CI Image Factory - Reset Images to Harness"
      description     = "This pipeline will reset the custom images back to the default Harness Platform values"
      organization_id = module.organization.details.id
      project_id      = module.project.details.id
      yaml_data = templatefile(
        "${path.module}/templates.pipelines.harness-ci-image-reset.yaml",
        {
          HARNESS_URL : var.harness_platform_url
          HARNESS_API_KEY_SECRET : var.harness_api_key_secret
          GATHER_SCAN_TEMPLATE : module.gather-harness-ci-images-template.details.id
        }
      )
      tags = {
        role = "harness-ci-image-factory"
      }
    }

    module "pipeline-execution-schedule" {
      source  = "harness-community/content/harness//modules/triggers"
      version = "0.1.1"

      name            = "Retrieve and Build Images"
      organization_id = module.organization.details.id
      project_id      = module.project.details.id
      pipeline_id     = module.harness-ci-image-factory.details.id
      trigger_enabled = var.enable_schedule
      yaml_data = templatefile(
        "${path.module}/templates.triggers.retrieve-and-build-images.yaml",
        {
          SCHEDULE : var.schedule
          REGISTRY_NAME : var.container_registry
        }
      )
      tags = {
        role = "harness-ci-image-factory"
      }
    }

    module "ecr-polling-trigger" {
      source  = "harness-community/content/harness//modules/triggers"
      version = "0.1.1"

      name            = "Poll ECR Registry for New Harness Images"
      organization_id = module.organization.details.id
      project_id      = module.project.details.id
      pipeline_id     = module.harness-ci-image-factory.details.id
      trigger_enabled = true
      yaml_data = templatefile(
        "${path.module}/templates.triggers.harness-ecr-polling-trigger.yaml",
        {
          SCHEDULE : "0 */6 * * *",  # Poll every 6 hours by default
          PIPELINE_ID : module.harness-ci-image-factory.details.id,
          REGISTRY_NAME : var.container_registry,
          MODIFY_DEFAULT : tostring(var.modify_default_image_config)
        }
      )
      tags = {
        role = "harness-ci-image-factory"
        source = "ecr-public"
      }
    }

    module "rss-webhook-trigger" {
      source  = "harness-community/content/harness//modules/triggers"
      version = "0.1.1"

      name            = "Harness CI RSS Feed Monitor"
      organization_id = module.organization.details.id
      project_id      = module.project.details.id
      pipeline_id     = module.harness-ci-image-factory.details.id
      trigger_enabled = true
      yaml_data = templatefile(
        "${path.module}/templates.triggers.harness-image-update-trigger.yaml",
        {
          PIPELINE_ID : module.harness-ci-image-factory.details.id,
          REGISTRY_NAME : var.container_registry,
          MODIFY_DEFAULT : tostring(var.modify_default_image_config)
        }
      )
      tags = {
        role = "harness-ci-image-factory"
        source = "rss-feed"
      }
    }

  # variables.tf
  "variables.tf": |
    # Provider Setup Details
    variable "harness_platform_url" {
      type        = string
      description = "[Optional] Enter the Harness Platform URL.  Defaults to Harness SaaS URL"
      default     = "https://app.harness.io/gateway"
    }

    variable "harness_platform_account" {
      type        = string
      description = "[Required] Enter the Harness Platform Account Number"
      sensitive   = true
    }

    variable "harness_platform_key" {
      type        = string
      description = "[Required] Enter the Harness Platform API Key for your account"
      sensitive   = true
    }

    variable "harness_api_key_secret" {
      type        = string
      description = "[Required] Enter the Harness secret that holds an API key for your account"
    }

    variable "organization_name" {
      type        = string
      description = "[Required] Provide an organization name.  Must be two or more characters"
    }

    variable "create_organization" {
      type        = bool
      description = "[Optional] Should this execution create a new Organization"
      default     = false
    }

    variable "project_name" {
      type        = string
      description = "[Required] Provide an project name.  Must be two or more characters"
    }

    variable "create_project" {
      type        = bool
      description = "[Optional] Should this execution create a new Project"
      default     = false
    }

    variable "container_registry" {
      type        = string
      description = "Container Registry to which the image will be saved and stored"
    }

    variable "container_registry_type" {
      type        = string
      description = "Type of Container Registry to which images will be pushed. Supported Values - azure or docker"

      validation {
        condition = (
          contains(["azure", "docker"], lower(var.container_registry_type))
        )
        error_message = <<EOF
            Validation of an object failed.
                * [Required] Container Registry Type must be one of following:
                  - azure
                  - docker
            EOF
      }
    }

    variable "container_registry_connector_ref" {
      type        = string
      description = "Container Registry Connector Reference"
    }

    variable "kubernetes_connector_ref" {
      type        = string
      description = "Kubernetes Connector Reference"
    }

    variable "kubernetes_namespace" {
      type        = string
      description = "Kubernetes Namespace within Cluster in which the CI process will build"
    }

    variable "max_build_concurrency" {
      type        = string
      description = "Maximum number of simultaneous builds to perform"
      default     = 5
    }

    variable "enable_schedule" {
      type        = bool
      description = "[Optional] Should we enable the execution of this pipeline to run on a schedule?"
      default     = true
    }

    variable "schedule" {
      type        = string
      description = "[Optional] Cron Format schedule for when and how frequently to schedule this pipeline"
      default     = "0 2 * * *"
    }

    variable "modify_default_image_config" {
      type        = bool
      description = "[Optional] Update the Harness Platform to use the newly pushed images as the default versions when running CI pipelines. (requires modification of the harnessImages docker connector)"
      default     = true
    }

  # locals.tf
  "locals.tf": |
    locals {
      build_push_target = {
        azure  = "harness-ci-build-images-azure.yaml"
        docker = "harness-ci-build-images-docker.yaml"
      }
    }

  # outputs.tf
  "outputs.tf": |
    output "pipeline" {
      value = module.harness-ci-image-factory.details
    }

    output "cleanup_pipeline" {
      value = module.harness-ci-image-factory-cleanup.details
    }

    output "organization_id" {
      description = "The Harness organization ID."
      value       = module.organization.details.id
    }

    output "project_id" {
      description = "The Harness project ID."
      value       = module.project.details.id
    }

  # versions.tf
  "versions.tf": |
    terraform {
      required_providers {
        harness = {
          source  = "harness/harness"
          version = ">= 0.14"
        }
        time = {
          source  = "hashicorp/time"
          version = "~> 0.9.1"
        }
      }
    }

  # Templates directory structure will be populated by init container
{{- end }} 