template:
  name: Harness CI Image Factory - Gather and Scan
  identifier: harness_ci_image_factory_gather_scan
  versionLabel: "1.0.0"
  type: Stage
  projectIdentifier: ${PROJECT_ID}
  orgIdentifier: ${ORG_ID}
  tags:
    role: harness-ci-image-factory
  spec:
    type: Custom
    spec:
      execution:
        steps:
          - step:
              type: Http
              name: Get Default Configuration
              identifier: get_default_configuration
              spec:
                url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/get-default-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>
                method: GET
                headers:
                  - key: X-API-KEY
                    value: <+secrets.getValue("HARNESS_API_KEY_SECRET")>
                  - key: Content-Type
                    value: application/json
                outputVariables:
                  - name: default_config
                    value: <+httpResponseBody>
          - step:
              type: ShellScript
              name: Get List of Images to Update
              identifier: get_list_of_images_to_update
              spec:
                shell: Bash
                source:
                  type: Inline
                  spec:
                    script: |
                      #!/bin/bash
                      set -e
                      
                      echo "Getting list of images to update..."
                      DEFAULT_CONFIG='<+execution.steps.get_default_configuration.output.outputVariables.default_config>'
                      
                      # Extract the data object
                      DATA=$(echo "$DEFAULT_CONFIG" | grep -o '"data":{[^}]*}' | sed 's/"data"://')
                      
                      # Process each field in the data object
                      IMAGES=""
                      
                      # Standard images
                      for FIELD in addonTag liteEngineTag gitCloneTag buildAndPushDockerRegistryTag buildAndPushECRTag buildAndPushGCRTag gcsUploadTag s3UploadTag artifactoryUploadTag cacheGCSTag cacheS3Tag securityTag; do
                        IMAGE=$(echo "$DATA" | grep -o "\"$FIELD\":\"[^\"]*\"" | cut -d':' -f2- | tr -d '"')
                        if [ ! -z "$IMAGE" ]; then
                          if [ ! -z "$IMAGES" ]; then
                            IMAGES="$IMAGES,$FIELD=$IMAGE"
                          else
                            IMAGES="$FIELD=$IMAGE"
                          fi
                        fi
                      done
                      
                      # Check if we should include Windows rootless images
                      if [ "<+pipeline.variables.include_windows_rootless>" == "true" ]; then
                        # Add Windows rootless images
                        ROOTLESS_IMAGES="harness/ci-addon:rootless-1.16.71,harness/ci-lite-engine:rootless-1.16.71,harness/drone-git:1.6.7-rootless"
                        
                        for ROOTLESS_IMAGE in $(echo $ROOTLESS_IMAGES | tr ',' '\n'); do
                          IMAGE_NAME=$(echo $ROOTLESS_IMAGE | cut -d':' -f1)
                          IMAGE_TAG=$(echo $ROOTLESS_IMAGE | cut -d':' -f2)
                          
                          FIELD=""
                          if [[ $IMAGE_NAME == "harness/ci-addon" ]]; then
                            FIELD="windowsRootlessAddonTag"
                          elif [[ $IMAGE_NAME == "harness/ci-lite-engine" ]]; then
                            FIELD="windowsRootlessLiteEngineTag"
                          elif [[ $IMAGE_NAME == "harness/drone-git" ]]; then
                            FIELD="windowsRootlessGitCloneTag"
                          fi
                          
                          if [ ! -z "$FIELD" ]; then
                            if [ ! -z "$IMAGES" ]; then
                              IMAGES="$IMAGES,$FIELD=$IMAGE_NAME:$IMAGE_TAG"
                            else
                              IMAGES="$FIELD=$IMAGE_NAME:$IMAGE_TAG"
                            fi
                          fi
                        done
                      fi
                      
                      echo "Images to update: $IMAGES"
                      harness_io out images="$IMAGES"
                environmentVariables: []
              timeout: 10m
          - step:
              type: ShellScript
              name: Scan Images for Vulnerabilities
              identifier: scan_images_for_vulnerabilities
              spec:
                shell: Bash
                source:
                  type: Inline
                  spec:
                    script: |
                      #!/bin/bash
                      set -e
                      
                      IMAGES='<+execution.steps.get_list_of_images_to_update.output.outputVariables.images>'
                      
                      if [ -z "$IMAGES" ]; then
                        echo "No images to scan"
                        exit 0
                      fi
                      
                      # Install Trivy scanner if not present
                      if ! command -v trivy &> /dev/null; then
                        echo "Installing Trivy vulnerability scanner..."
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.38.0
                      fi
                      
                      # Process each image
                      VULNERABLE_IMAGES=""
                      IFS=',' read -ra IMG_ARRAY <<< "$IMAGES"
                      
                      for IMG_DATA in "${IMG_ARRAY[@]}"; do
                        FIELD=$(echo $IMG_DATA | cut -d'=' -f1)
                        IMAGE=$(echo $IMG_DATA | cut -d'=' -f2)
                        
                        echo "Scanning $IMAGE for vulnerabilities..."
                        SCAN_RESULT=$(trivy image --no-progress --severity HIGH,CRITICAL --ignore-unfixed --format json $IMAGE 2>/dev/null || echo '{"Results": []}')
                        
                        VULN_COUNT=$(echo $SCAN_RESULT | grep -o '"Vulnerabilities":' | wc -l)
                        
                        if [ "$VULN_COUNT" -gt 0 ]; then
                          echo "⚠️ Found vulnerabilities in $IMAGE"
                          if [ ! -z "$VULNERABLE_IMAGES" ]; then
                            VULNERABLE_IMAGES="$VULNERABLE_IMAGES,$IMAGE"
                          else
                            VULNERABLE_IMAGES="$IMAGE"
                          fi
                        else
                          echo "✅ No critical/high vulnerabilities found in $IMAGE"
                        fi
                      done
                      
                      if [ ! -z "$VULNERABLE_IMAGES" ]; then
                        echo "⚠️ Warning: The following images have vulnerabilities: $VULNERABLE_IMAGES"
                        echo "Continuing processing, but consider addressing these issues"
                      fi
                environmentVariables: []
              timeout: 30m
              when:
                stageStatus: Success
                condition: <+execution.steps.get_list_of_images_to_update.output.outputVariables.images> != "" 