pipeline:
  name: Harness CI Image Factory
  identifier: harness_ci_image_factory
  projectIdentifier: ${PROJECT_ID}
  orgIdentifier: ${ORG_ID}
  tags:
    role: harness-ci-image-factory
    source: harness
  variables:
    - name: registry
      description: Container Registry to which the image will be saved and stored
      type: String
      value: <+input>
      default: ${REGISTRY_NAME}
    - name: is_retry
      description: Flag indicating if this is a retry execution
      type: String
      value: <+input>.allowedValues(true,false)
      default: "false"
    - name: modify_default
      description: Update the Harness Platform to use the newly pushed images
      type: String
      value: <+input>.allowedValues(true,false)
      default: "${MODIFY_DEFAULT}"
    - name: MAX_CONCURRENCY
      type: Number
      description: Maximum number of concurrent operations
      required: false
      value: ${MAX_CONCURRENCY}
    - name: HARNESS_URL
      type: String
      description: Harness platform URL
      required: true
      value: ${HARNESS_URL}
    - name: HARNESS_API_KEY_SECRET
      type: String
      description: Secret identifier for Harness API key
      required: true
      value: ${HARNESS_API_KEY_SECRET}
    - name: infrastructure_type
      type: String
      description: Type of infrastructure (K8 or VM)
      value: <+input>.allowedValues(K8,VM)
      default: "K8"
    - name: include_windows_rootless
      type: String
      description: Include Windows rootless images
      value: <+input>.allowedValues(true,false)
      default: "false"

  stages:
    - stage:
        name: Gather Harness Images
        identifier: gather_harness_images
        description: Reads official Harness API to gather a list of the Harness Images used for pipeline execution
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Get Default Configuration
                  identifier: get_default_configuration
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/get-default-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>
                    method: GET
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue("HARNESS_API_KEY_SECRET")>
                      - key: Content-Type
                        value: application/json
                    outputVariables:
                      - name: default_config
                        value: <+httpResponseBody>
              - step:
                  type: ShellScript
                  name: Get List of Images to Update
                  identifier: get_list_of_images_to_update
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          echo "Getting list of images to update..."
                          DEFAULT_CONFIG='<+execution.steps.get_default_configuration.output.outputVariables.default_config>'
                          
                          # Extract the data object
                          DATA=$(echo "$DEFAULT_CONFIG" | grep -o '"data":{[^}]*}' | sed 's/"data"://')
                          
                          # Process each field in the data object
                          IMAGES=""
                          
                          # Standard images
                          for FIELD in addonTag liteEngineTag gitCloneTag buildAndPushDockerRegistryTag buildAndPushECRTag buildAndPushGCRTag gcsUploadTag s3UploadTag artifactoryUploadTag cacheGCSTag cacheS3Tag securityTag; do
                            IMAGE=$(echo "$DATA" | grep -o "\"$FIELD\":\"[^\"]*\"" | cut -d':' -f2- | tr -d '"')
                            if [ ! -z "$IMAGE" ]; then
                              if [ ! -z "$IMAGES" ]; then
                                IMAGES="$IMAGES,$FIELD=$IMAGE"
                              else
                                IMAGES="$FIELD=$IMAGE"
                              fi
                            fi
                          done
                          
                          # Check if we should include Windows rootless images
                          if [ "<+pipeline.variables.include_windows_rootless>" == "true" ]; then
                            # Add Windows rootless images
                            ROOTLESS_IMAGES="harness/ci-addon:rootless-1.16.71,harness/ci-lite-engine:rootless-1.16.71,harness/drone-git:1.6.7-rootless"
                            
                            for ROOTLESS_IMAGE in $(echo $ROOTLESS_IMAGES | tr ',' '\n'); do
                              IMAGE_NAME=$(echo $ROOTLESS_IMAGE | cut -d':' -f1)
                              IMAGE_TAG=$(echo $ROOTLESS_IMAGE | cut -d':' -f2)
                              
                              FIELD=""
                              if [[ $IMAGE_NAME == "harness/ci-addon" ]]; then
                                FIELD="windowsRootlessAddonTag"
                              elif [[ $IMAGE_NAME == "harness/ci-lite-engine" ]]; then
                                FIELD="windowsRootlessLiteEngineTag"
                              elif [[ $IMAGE_NAME == "harness/drone-git" ]]; then
                                FIELD="windowsRootlessGitCloneTag"
                              fi
                              
                              if [ ! -z "$FIELD" ]; then
                                if [ ! -z "$IMAGES" ]; then
                                  IMAGES="$IMAGES,$FIELD=$IMAGE_NAME:$IMAGE_TAG"
                                else
                                  IMAGES="$FIELD=$IMAGE_NAME:$IMAGE_TAG"
                                fi
                              fi
                            done
                          fi
                          
                          echo "Images to update: $IMAGES"
                          harness_io out images="$IMAGES"
                    environmentVariables: []
                  timeout: 10m
      
    - stage:
        name: Build and Push Images
        identifier: build_and_push_images
        description: Builds and pushes Harness CI images to the specified registry
        template:
          templateRef: ${BUILD_PUSH_TEMPLATE}
        strategy:
          repeat:
            items: <+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images.split(",")>
            maxConcurrency: <+pipeline.variables.MAX_CONCURRENCY>
        variables:
          - name: IMAGE_NAME
            type: String
            value: <+repeat.item.split("=")[1].split(":")[0]>
          - name: IMAGE_VERSION
            type: String
            value: <+repeat.item.split("=")[1].split(":")[1]>
          - name: IMAGE
            type: String
            value: <+repeat.item.split("=")[1]>
          - name: REGISTRY_CONNECTOR_ID
            type: String
            value: ${CONTAINER_REGISTRY_CONNECTOR}
        when:
          pipelineStatus: Success
          condition: <+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images> != ""
    
    - stage:
        name: Update Harness CI Image Configuration
        identifier: update_harness_ci_image_configuration
        description: Updates the Harness Platform to use the newly pushed images as the default versions when running CI pipelines
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Update Custom Configuration of Images
                  identifier: Update_Custom_Configuration_of_Images
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/update-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>
                    method: POST
                    assertion: <+httpResponseCode> == 200
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue("HARNESS_API_KEY_SECRET")>
                      - key: Content-Type
                        value: application/json
                    outputVariables: []
                    requestBody: |
                      [
                          {
                              "field": "<+repeat.item.split('=')[0]>",
                              "value": "<+pipeline.variables.registry>/<+repeat.item.split('=')[1]>"
                          }
                      ]
                  timeout: 30s
        tags: {}
        strategy:
          repeat:
            items: <+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images.split(",")>
            maxConcurrency: <+pipeline.variables.MAX_CONCURRENCY>
        when:
          pipelineStatus: Success
          condition: (<+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images> != "") && <+pipeline.variables.modify_default>
    
    - stage:
        name: Pause to recheck status
        identifier: pause_to_recheck_status
        description: Waiting period to allow images to propagate
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Wait
                  name: Wait for 30 seconds
                  identifier: Wait_for_30_seconds
                  spec:
                    duration: 30s
        tags: {}
    
    - stage:
        name: Verify Harness Images
        identifier: verify_harness_images
        description: Verifies that all Harness images have been correctly processed
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Get Customer Configuration
                  identifier: get_customer_configuration
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/gateway/ci/execution-config/get-customer-config?accountIdentifier=<+account.identifier>&infra=<+pipeline.variables.infrastructure_type>&overridesOnly=true
                    method: GET
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue("HARNESS_API_KEY_SECRET")>
                      - key: Content-Type
                        value: application/json
                    outputVariables:
                      - name: customer_config
                        value: <+httpResponseBody>
              - step:
                  type: ShellScript
                  name: Get List of Images to Update
                  identifier: get_list_of_images_to_update
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          echo "Verifying images..."
                          CUSTOMER_CONFIG='<+execution.steps.get_customer_configuration.output.outputVariables.customer_config>'
                          
                          # Check for missing images in verification
                          if [[ $CUSTOMER_CONFIG == *"data"*":{}"* ]] || [[ $CUSTOMER_CONFIG == *"\"data\":{}"* ]]; then
                            echo "✅ All images have been successfully updated"
                            harness_io out images=""
                          else
                            echo "⚠️ Some images may still need to be processed:"
                            echo "$CUSTOMER_CONFIG"
                            
                            # Get the list of missing images
                            DATA=$(echo "$CUSTOMER_CONFIG" | grep -o '"data":{[^}]*}' | sed 's/"data"://')
                            MISSING_IMAGES=""
                            
                            # Process each field in the data object
                            for FIELD in addonTag liteEngineTag gitCloneTag buildAndPushDockerRegistryTag buildAndPushECRTag buildAndPushGCRTag gcsUploadTag s3UploadTag artifactoryUploadTag cacheGCSTag cacheS3Tag securityTag windowsRootlessAddonTag windowsRootlessLiteEngineTag windowsRootlessGitCloneTag; do
                              IMAGE=$(echo "$DATA" | grep -o "\"$FIELD\":\"[^\"]*\"" | cut -d':' -f2- | tr -d '"')
                              if [ ! -z "$IMAGE" ]; then
                                if [[ $IMAGE != *"<+pipeline.variables.registry>"* ]]; then
                                  if [ ! -z "$MISSING_IMAGES" ]; then
                                    MISSING_IMAGES="$MISSING_IMAGES,$FIELD=$IMAGE"
                                  else
                                    MISSING_IMAGES="$FIELD=$IMAGE"
                                  fi
                                fi
                              fi
                            done
                            
                            echo "Missing images: $MISSING_IMAGES"
                            harness_io out images="$MISSING_IMAGES"
                          fi
                    environmentVariables: []
                  timeout: 10m
    
    - stage:
        name: Build Missing Images
        identifier: build_missing_images
        description: If additional images have been found, we will retrigger this pipeline to resolve the missing images
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: Missing Images Require Execution
                  identifier: Missing_Images_Require_Execution
                  spec:
                    url: <+pipeline.variables.HARNESS_URL>/pipeline/api/pipeline/execute/<+pipeline.identifier>?accountIdentifier=<+account.identifier>&orgIdentifier=<+org.identifier>&projectIdentifier=<+project.identifier>
                    method: POST
                    assertion: <+httpResponseCode> == 200
                    headers:
                      - key: X-API-KEY
                        value: <+secrets.getValue("HARNESS_API_KEY_SECRET")>
                      - key: Content-Type
                        value: application/yaml
                    requestBody: |
                      pipeline:
                        identifier: <+pipeline.identifier>
                        variables:
                          - name: registry
                            value: <+pipeline.variables.registry>
                          - name: is_retry
                            value: "true"
                          - name: infrastructure_type
                            value: <+pipeline.variables.infrastructure_type>
                          - name: include_windows_rootless
                            value: <+pipeline.variables.include_windows_rootless>
                    outputVariables: []
                  timeout: 30s
                  when:
                    stageStatus: Success
                    condition: "!<+pipeline.variables.is_retry>"
        tags: {}
        when:
          condition: <+pipeline.stages.verify_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images> != ""
          pipelineStatus: Success
    
  timeout: 60m 