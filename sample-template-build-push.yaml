template:
  name: Harness CI Image Factory - Build and Push
  identifier: harness_ci_image_factory_build_push
  versionLabel: "1.0.0"
  type: Stage
  projectIdentifier: ${PROJECT_ID}
  orgIdentifier: ${ORG_ID}
  tags:
    role: harness-ci-image-factory
  spec:
    type: Custom
    spec:
      execution:
        steps:
          - step:
              type: ShellScript
              name: Check Image Already Exists
              identifier: check_image_already_exists
              spec:
                shell: Bash
                source:
                  type: Inline
                  spec:
                    script: |
                      #!/bin/bash
                      set -e
                      
                      IMAGE_NAME="<+stage.variables.IMAGE_NAME>"
                      IMAGE_VERSION="<+stage.variables.IMAGE_VERSION>"
                      TARGET_REGISTRY="<+pipeline.variables.registry>"
                      
                      echo "Checking if image $TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION already exists..."
                      
                      # Setup the skopeo command for registry interaction
                      SKOPEO_CMD="skopeo inspect"
                      
                      # If not available, we'll use a docker API approach instead
                      if ! command -v skopeo &> /dev/null; then
                        echo "Skopeo not available, using alternative approach..."
                        
                        # Try to inspect the image in the registry
                        # This is a simplified approach - in production you would handle authentication and registry-specific APIs
                        if docker pull "$TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION" &>/dev/null; then
                          echo "Image $TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION already exists in registry"
                          echo "Skipping build and push for this image"
                          harness_io out image_exists="true"
                        else
                          echo "Image does not exist or couldn't be pulled, will build and push"
                          harness_io out image_exists="false"
                        fi
                      else
                        # Use skopeo to check if image exists (handles authentication better)
                        if $SKOPEO_CMD "docker://$TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION" &>/dev/null; then
                          echo "Image $TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION already exists in registry"
                          echo "Skipping build and push for this image"
                          harness_io out image_exists="true"
                        else
                          echo "Image does not exist, will build and push"
                          harness_io out image_exists="false"
                        fi
                      fi
                environmentVariables: []
              timeout: 5m
          
          - step:
              type: BuildAndPushDockerRegistry
              name: Pull and Push Image
              identifier: pull_and_push_image
              spec:
                connectorRef: <+stage.variables.REGISTRY_CONNECTOR_ID>
                repo: <+stage.variables.IMAGE_NAME>
                tags:
                  - <+stage.variables.IMAGE_VERSION>
                dockerfile: Dockerfile
                target: ""
                context: "."
                buildArgs: {}
                buildkit: true
                resources:
                  limits:
                    memory: 2Gi
                    cpu: "1"
              failureStrategies: []
              when:
                stageStatus: Success
                condition: <+execution.steps.check_image_already_exists.output.outputVariables.image_exists> == "false"
              
          - step:
              type: ShellScript
              name: Create Dockerfile
              identifier: create_dockerfile
              spec:
                shell: Bash
                source:
                  type: Inline
                  spec:
                    script: |
                      #!/bin/bash
                      set -e
                      
                      IMAGE="<+stage.variables.IMAGE>"
                      
                      cat > Dockerfile << EOL
                      FROM $IMAGE
                      LABEL org.opencontainers.image.vendor="Harness Inc"
                      LABEL org.opencontainers.image.title="<+stage.variables.IMAGE_NAME>"
                      LABEL org.opencontainers.image.description="Harness CI image maintained by <+account.name>"
                      LABEL org.opencontainers.image.url="https://harness.io"
                      LABEL org.opencontainers.image.created="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
                      LABEL org.opencontainers.image.revision="<+pipeline.sequenceId>"
                      EOL
                      
                      echo "Created Dockerfile with content:"
                      cat Dockerfile
                environmentVariables: []
              timeout: 5m
              when:
                stageStatus: Success
                condition: <+execution.steps.check_image_already_exists.output.outputVariables.image_exists> == "false"
              
          - step:
              type: ShellScript
              name: Verify Pushed Image
              identifier: verify_pushed_image
              spec:
                shell: Bash
                source:
                  type: Inline
                  spec:
                    script: |
                      #!/bin/bash
                      set -e
                      
                      IMAGE_NAME="<+stage.variables.IMAGE_NAME>"
                      IMAGE_VERSION="<+stage.variables.IMAGE_VERSION>"
                      TARGET_REGISTRY="<+pipeline.variables.registry>"
                      
                      echo "Verifying image $TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION exists in registry..."
                      
                      # Try to pull the image to verify it exists
                      if docker pull "$TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION" &>/dev/null; then
                        echo "✅ Image $TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION verified in registry"
                      else
                        echo "❌ Failed to verify image $TARGET_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION in registry"
                        exit 1
                      fi
                      
                      # Optional: additional verification steps could be added here
                      # - Check image digest matches source
                      # - Validate labels
                      # - etc.
                environmentVariables: []
              timeout: 5m
              when:
                stageStatus: Success 