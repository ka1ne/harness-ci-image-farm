# Gather and Collate available and in-use Harness CI Image details
template:
  name: Build and Push Harness CI Azure Images
  identifier: build_push_harness_ci_azure_images
  projectIdentifier: ${PROJECT_IDENTIFIER}
  orgIdentifier: ${ORG_IDENTIFIER}
  description: Harness Template created via Terraform
  versionLabel: ${VERSION}
  type: Stage
  spec:
    type: CI
    spec:
      cloneCodebase: false
      execution:
        steps:
          - step:
              description: This step will create a new Dockerfile to be leveraged in the upcoming Build and Push step.  In addition this step leverages the RUNNER_IMAGE retrieved from the 'Gather Harness Images' stage.
              identifier: Generate_Dockerfile
              name: Generate Dockerfile
              spec:
                command: |
                  set -eo pipefail
                  set +x
                  echo "Generating Dockerfile for $IMAGE"
                  echo "--------------"
                  mkdir -p $IMAGE_NAME
                  cat <<EOF >$IMAGE_NAME/Dockerfile
                  FROM $IMAGE
                  EOF
                  echo
                  echo "Display Generated Dockerfile"
                  echo "--------------"
                  cat $IMAGE_NAME/Dockerfile
                connectorRef: account.harnessImage
                envVariables:
                  IMAGE: <+stage.variables.IMAGE>
                  IMAGE_NAME: <+stage.variables.IMAGE_NAME>
                image: <+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.runner>
                shell: Sh
              type: Run
          - step:
              failureStrategies: []
              identifier: BuildandPushtoACR
              name: Build and Push to ACR
              spec:
                connectorRef: ${CONTAINER_REGISTRY_CONNECTOR}
                dockerfile: <+stage.variables.IMAGE_NAME>/Dockerfile
                repository: <+pipeline.variables.registry>/<+stage.variables.IMAGE_NAME>
                tags:
                  - <+stage.variables.IMAGE_VERSION>
              type: BuildAndPushACR
              when:
                stageStatus: Success
      infrastructure:
        spec:
          automountServiceAccountToken: true
          connectorRef: ${KUBERNETES_CONNECTOR_REF}
          namespace: ${KUBERNETES_NAMESPACE}
          nodeSelector: {}
          os: Linux
        type: KubernetesDirect
    variables:
      - description: ""
        name: images
        type: String
        value: <+pipeline.stages.gather_harness_images.spec.execution.steps.get_list_of_images_to_update.output.outputVariables.images>
